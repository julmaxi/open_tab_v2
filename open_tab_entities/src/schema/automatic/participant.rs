//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "participant")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub tournament_id: Uuid,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub registration_key: Option<Vec<u8>>,
    pub name: String,
    pub is_anonymous: bool,
    pub break_category_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::adjudicator::Entity")]
    Adjudicator,
    #[sea_orm(has_many = "super::institution_declaration::Entity")]
    InstitutionDeclaration,
    #[sea_orm(has_many = "super::participant_tournament_institution::Entity")]
    ParticipantTournamentInstitution,
    #[sea_orm(has_one = "super::speaker::Entity")]
    Speaker,
    #[sea_orm(
        belongs_to = "super::tournament::Entity",
        from = "Column::TournamentId",
        to = "super::tournament::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Tournament,
    #[sea_orm(
        belongs_to = "super::tournament_break_category::Entity",
        from = "Column::BreakCategoryId",
        to = "super::tournament_break_category::Column::Uuid",
        on_update = "SetNull",
        on_delete = "SetNull"
    )]
    TournamentBreakCategory,
    #[sea_orm(has_many = "super::user_participant::Entity")]
    UserParticipant,
}

impl Related<super::adjudicator::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Adjudicator.def()
    }
}

impl Related<super::institution_declaration::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InstitutionDeclaration.def()
    }
}

impl Related<super::participant_tournament_institution::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ParticipantTournamentInstitution.def()
    }
}

impl Related<super::speaker::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Speaker.def()
    }
}

impl Related<super::tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tournament.def()
    }
}

impl Related<super::tournament_break_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentBreakCategory.def()
    }
}

impl Related<super::user_participant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserParticipant.def()
    }
}

impl Related<super::tournament_institution::Entity> for Entity {
    fn to() -> RelationDef {
        super::participant_tournament_institution::Relation::TournamentInstitution.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::participant_tournament_institution::Relation::Participant
                .def()
                .rev(),
        )
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_participant::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_participant::Relation::Participant.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
