//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "published_tournament")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    #[sea_orm(unique)]
    pub tournament_id: Option<Uuid>,
    pub public_name: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub image_data: Option<Vec<u8>>,
    pub image_type: Option<String>,
    pub list_publicly: bool,
    pub show_motions: bool,
    pub show_draws: bool,
    pub show_tab: bool,
    pub show_participants: bool,
    pub start_date: Option<DateTime>,
    pub end_date: Option<DateTime>,
    pub location: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tournament::Entity",
        from = "Column::TournamentId",
        to = "super::tournament::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Tournament,
}

impl Related<super::tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tournament.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
