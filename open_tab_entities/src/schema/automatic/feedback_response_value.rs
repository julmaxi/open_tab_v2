//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "feedback_response_value")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub response_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub question_id: Uuid,
    pub int_value: Option<i32>,
    pub string_value: Option<String>,
    pub bool_value: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::feedback_question::Entity",
        from = "Column::QuestionId",
        to = "super::feedback_question::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FeedbackQuestion,
    #[sea_orm(
        belongs_to = "super::feedback_response::Entity",
        from = "Column::ResponseId",
        to = "super::feedback_response::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FeedbackResponse,
}

impl Related<super::feedback_question::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeedbackQuestion.def()
    }
}

impl Related<super::feedback_response::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeedbackResponse.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
