//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "debate_backup_ballot")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub debate_id: Uuid,
    #[sea_orm(unique)]
    pub ballot_id: Uuid,
    pub timestamp: DateTime,
    pub was_seen: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ballot::Entity",
        from = "Column::BallotId",
        to = "super::ballot::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Ballot,
    #[sea_orm(
        belongs_to = "super::tournament_debate::Entity",
        from = "Column::DebateId",
        to = "super::tournament_debate::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TournamentDebate,
}

impl Related<super::ballot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ballot.def()
    }
}

impl Related<super::tournament_debate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentDebate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
