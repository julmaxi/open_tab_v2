//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ballot")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::adjudicator_speech_score::Entity")]
    AdjudicatorSpeechScore,
    #[sea_orm(has_many = "super::adjudicator_team_score::Entity")]
    AdjudicatorTeamScore,
    #[sea_orm(has_many = "super::ballot_adjudicator::Entity")]
    BallotAdjudicator,
    #[sea_orm(has_many = "super::ballot_speech::Entity")]
    BallotSpeech,
    #[sea_orm(has_many = "super::ballot_team::Entity")]
    BallotTeam,
    #[sea_orm(has_one = "super::debate_backup_ballot::Entity")]
    DebateBackupBallot,
    #[sea_orm(has_many = "super::tournament_debate::Entity")]
    TournamentDebate,
}

impl Related<super::adjudicator_speech_score::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdjudicatorSpeechScore.def()
    }
}

impl Related<super::adjudicator_team_score::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdjudicatorTeamScore.def()
    }
}

impl Related<super::ballot_adjudicator::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BallotAdjudicator.def()
    }
}

impl Related<super::ballot_speech::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BallotSpeech.def()
    }
}

impl Related<super::ballot_team::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BallotTeam.def()
    }
}

impl Related<super::debate_backup_ballot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DebateBackupBallot.def()
    }
}

impl Related<super::tournament_debate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentDebate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
