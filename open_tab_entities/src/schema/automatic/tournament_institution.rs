//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tournament_institution")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub name: String,
    pub tournament_id: Uuid,
    pub official_identifier: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::institution_declaration::Entity")]
    InstitutionDeclaration,
    #[sea_orm(has_many = "super::participant_tournament_institution::Entity")]
    ParticipantTournamentInstitution,
    #[sea_orm(
        belongs_to = "super::tournament::Entity",
        from = "Column::TournamentId",
        to = "super::tournament::Column::Uuid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Tournament,
}

impl Related<super::institution_declaration::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InstitutionDeclaration.def()
    }
}

impl Related<super::participant_tournament_institution::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ParticipantTournamentInstitution.def()
    }
}

impl Related<super::tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tournament.def()
    }
}

impl Related<super::participant::Entity> for Entity {
    fn to() -> RelationDef {
        super::participant_tournament_institution::Relation::Participant.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::participant_tournament_institution::Relation::TournamentInstitution
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
