//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tournament")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub annoucements_password: Option<String>,
    pub name: String,
    pub feedback_release_time: Option<DateTime>,
    pub last_modified: DateTime,
    pub allow_self_declared_clashes: bool,
    pub allow_speaker_self_declared_clashes: bool,
    pub show_declared_clashes: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::feedback_form::Entity")]
    FeedbackForm,
    #[sea_orm(has_many = "super::feedback_question::Entity")]
    FeedbackQuestion,
    #[sea_orm(has_many = "super::participant::Entity")]
    Participant,
    #[sea_orm(has_one = "super::published_tournament::Entity")]
    PublishedTournament,
    #[sea_orm(has_many = "super::team::Entity")]
    Team,
    #[sea_orm(has_many = "super::tournament_break::Entity")]
    TournamentBreak,
    #[sea_orm(has_many = "super::tournament_break_category::Entity")]
    TournamentBreakCategory,
    #[sea_orm(has_many = "super::tournament_entity::Entity")]
    TournamentEntity,
    #[sea_orm(has_many = "super::tournament_institution::Entity")]
    TournamentInstitution,
    #[sea_orm(has_many = "super::tournament_log::Entity")]
    TournamentLog,
    #[sea_orm(has_many = "super::tournament_plan_node::Entity")]
    TournamentPlanNode,
    #[sea_orm(has_many = "super::tournament_round::Entity")]
    TournamentRound,
    #[sea_orm(has_many = "super::tournament_venue::Entity")]
    TournamentVenue,
    #[sea_orm(has_many = "super::user_access_key::Entity")]
    UserAccessKey,
    #[sea_orm(has_many = "super::user_tournament::Entity")]
    UserTournament,
}

impl Related<super::feedback_form::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeedbackForm.def()
    }
}

impl Related<super::feedback_question::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeedbackQuestion.def()
    }
}

impl Related<super::participant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Participant.def()
    }
}

impl Related<super::published_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PublishedTournament.def()
    }
}

impl Related<super::team::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Team.def()
    }
}

impl Related<super::tournament_break::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentBreak.def()
    }
}

impl Related<super::tournament_break_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentBreakCategory.def()
    }
}

impl Related<super::tournament_entity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentEntity.def()
    }
}

impl Related<super::tournament_institution::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentInstitution.def()
    }
}

impl Related<super::tournament_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentLog.def()
    }
}

impl Related<super::tournament_plan_node::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentPlanNode.def()
    }
}

impl Related<super::tournament_round::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentRound.def()
    }
}

impl Related<super::tournament_venue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentVenue.def()
    }
}

impl Related<super::user_access_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserAccessKey.def()
    }
}

impl Related<super::user_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTournament.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_tournament::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_tournament::Relation::Tournament.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
