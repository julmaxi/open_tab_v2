//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user_associated_institution")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub institution_id: Uuid,
    pub start_of_association: Date,
    pub end_of_association: Option<Date>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Uuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
    #[sea_orm(
        belongs_to = "super::well_known_institution::Entity",
        from = "Column::InstitutionId",
        to = "super::well_known_institution::Column::Uuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WellKnownInstitution,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::well_known_institution::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WellKnownInstitution.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
